#include "core/pointcloud/filter.hh"
#include "core/share/common.hh"

#include <pcl/filters/box_clipper3D.h>
#include <pcl/filters/passthrough.h>
#include <pcl/filters/radius_outlier_removal.h>

using namespace core::cloud;

template <typename PointT>
struct Filter<PointT>::Impl {
public:
    Impl() = default;

    /// Apply
    void apply(CloudSource& pointCloud) { }

    void extract(const CloudSource& input, CloudSource& output) { }

    /// Select
    int addSelectPointArea(Eigen::Vector3d point) { }

    int addSelectCubeArea(Eigen::Vector3d corner[2]) { }

    int addSelectCubeArea(Eigen::Vector3d center, double length) { }

    int addSelectSphereArea(Eigen::Vector3d center, double radius) { }

    void removeAllSelectArea() { }

    void removeSelectArea(int index) { }

private:
    pcl::BoxClipper3D<PointT> boxClipper_ { Eigen::Affine3f::Identity() };
    pcl::RadiusOutlierRemoval<PointT> radiusOutlierRemoval_;
    pcl::PassThrough<PointT> passThrough_;
};

template <typename PointT>
Filter<PointT>::Filter(util::Singleton<Filter>::token)
    : pimpl_(new Impl) {
}

template <typename PointT>
Filter<PointT>::~Filter() {
    delete pimpl_;
}

/// Apply
template <typename PointT>
void Filter<PointT>::apply(CloudSource& pointCloud) { }

template <typename PointT>
void Filter<PointT>::extract(const CloudSource& input, CloudSource& output) { }

/// Select
template <typename PointT>
int Filter<PointT>::addSelectPointArea(Eigen::Vector3d point) { }

template <typename PointT>
int Filter<PointT>::addSelectCubeArea(Eigen::Vector3d corner[2]) { }

template <typename PointT>
int Filter<PointT>::addSelectCubeArea(Eigen::Vector3d center, double length) { }

template <typename PointT>
int Filter<PointT>::addSelectSphereArea(Eigen::Vector3d center, double radius) { }

template <typename PointT>
void Filter<PointT>::removeAllSelectArea() { }

template <typename PointT>
void Filter<PointT>::removeSelectArea(int index) { }